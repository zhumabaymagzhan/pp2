import psycopg2

def connect():
    return psycopg2.connect(
        dbname="Tsk_2",
        user="postgres",
        password="123456",
        host="localhost",
        port="5432"
    )

# 1. –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É
def find_by_pattern():
    pattern = input("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω (—á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞): ")
    conn = connect()
    cur = conn.cursor()
    cur.execute("SELECT * FROM find_by_pattern(%s)", (pattern,))
    rows = cur.fetchall()
    for row in rows:
        print(row)
    cur.close()
    conn.close()

# 2. –í—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def insert_or_update_user():
    name = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
    conn = connect()
    cur = conn.cursor()
    cur.execute("CALL insert_or_update_user(%s, %s)", (name, phone))
    conn.commit()
    cur.close()
    conn.close()
    print("–ì–æ—Ç–æ–≤–æ.")

def connect():
    return psycopg2.connect(
        dbname="Tsk_2",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–º—è —Å–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user="postgres",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password="123456",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
        host="localhost",  # –ò–ª–∏ IP —Å–µ—Ä–≤–µ—Ä–∞
        port="5432",  # –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è PostgreSQL
        options="-c client_encoding=utf8"
    )

# –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def insert_users_batch():
    users = []
    count = int(input("–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å? "))
    for _ in range(count):
        name = input("–ò–º—è: ")
        phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–∏–º—è,—Ç–µ–ª–µ—Ñ–æ–Ω" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users.append(f"{name},{phone}")

    conn = connect()
    cur = conn.cursor()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PostgreSQL
    users_for_db = users

    # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –º–∞—Å—Å–∏–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("CALL insert_users(%s)", (users_for_db,))
    conn.commit()
    cur.close()
    conn.close()
    print("–ì–æ—Ç–æ–≤–æ. –ü—Ä–æ–≤–µ—Ä—è–π –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –Ω–æ–º–µ—Ä–∞—Ö.")



# 4. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
def get_paginated():
    limit = int(input("–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? "))
    offset = int(input("–° –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞—Ç—å? "))
    conn = connect()
    cur = conn.cursor()
    cur.execute("SELECT * FROM get_phonebook_paginated(%s, %s)", (limit, offset))
    rows = cur.fetchall()
    for row in rows:
        print(row)
    cur.close()
    conn.close()

# 5. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
def delete_by_proc():
    val = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    conn = connect()
    cur = conn.cursor()
    cur.execute("CALL delete_user(%s)", (val,))
    conn.commit()
    cur.close()
    conn.close()
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.")


# üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def menu():
    while True:
        print("\n==== PhoneBook Pro Menu ====")
        print("1. –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
        print("2. –í—Å—Ç–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("3. –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("4. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
        print("5. –£–¥–∞–ª–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏/–Ω–æ–º–µ—Ä—É")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–æ—Ä: ")

        if choice == "1":
            find_by_pattern()
        elif choice == "2":
            insert_or_update_user()
        elif choice == "3":
            insert_users_batch()
        elif choice == "4":
            get_paginated()
        elif choice == "5":
            delete_by_proc()
        elif choice == "0":
            print("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    menu()
